akka.persistence.journal.plugin = "akka.persistence.journal.leveldb"
akka.persistence.journal.leveldb.dir = "target/hello-akka/journal"

akka.persistence.snapshot-store.plugin = "akka.persistence.snapshot-store.local"
akka.persistence.snapshot-store.local.dir = "target/hello-akka/snapshots"

localStores {
  akka.persistence.journal.plugin = "akka.persistence.journal.leveldb"
  akka.persistence.journal.leveldb.dir = "target/local-stores/journal"

  akka.persistence.journal.leveldb.compaction-intervals {
    simple-persistent-actor = 1000
    "*" = 5000
  }

  akka.persistence.snapshot-store.plugin = "akka.persistence.snapshot-store.local"
  akka.persistence.snapshot-store.local.dir = "target/local-stores/snapshots"
}

postgresqlStores {
  akka.persistence.journal.plugin = "jdbc-journal"
  akka.persistence.snapshot-store.plugin = "jdbc-snapshot-store"

  akka-persistence-jdbc {
    shared-databases {
      slick {
        profile = "slick.jdbc.PostgresProfile$"
        db {
          numThreads = 10
          driver = "org.postgresql.Driver"
          url = "jdbc:postgresql://localhost:5432/rtjvm"
          user = "docker"
          password = "docker"
        }
      }
    }
  }

  jdbc-journal {
    use-shared-db = "slick"
  }

  jdbc-snapshot-store {
    use-shared-db = "slick"
  }
}

cassandraStores {
  akka.persistence.journal.plugin = "cassandra-journal"
  akka.persistence.snapshot-store.plugin = "cassandra-snapshot-store"
}

customSerialization {
  akka.persistence.journal.plugin = "cassandra-journal"
  akka.persistence.snapshot-store.plugin = "cassandra-snapshot-store"

  akka.actor {
    serializers {
      java = "akka.serialization.JavaSerializer"
      customSer = "stores.UserRegistrationSerializer"
    }

    serialization-bindings {
      "stores.UserRegistrationActor$Registered" = customSer
    }
  }
}

eventAdapters {
  akka.persistence.journal.plugin = "cassandra-journal"
  akka.persistence.snapshot-store.plugin = "cassandra-snapshot-store"

  cassandra-journal {
    event-adapters {
      guitar-inventory-enhancer = "patterns.SchemeEvolutionAndEventAdapters$GuitarReadEventAdapter"
    }

    event-adapter-bindings {
      "patterns.SchemeEvolutionAndEventAdapters$InventoryManager$GuitarAdded" = guitar-inventory-enhancer
    }
  }
}

detachingModels {
  akka.persistence.journal.plugin = "cassandra-journal"
  akka.persistence.snapshot-store.plugin = "cassandra-snapshot-store"

  cassandra-journal {
    event-adapters {
      detach-adapter = "patterns.ModelAdapter"
    }

    event-adapter-bindings {
      "patterns.DomainModel$CouponApplied" = detach-adapter
      "patterns.DataModel$WrittenCouponAdapter" = detach-adapter
      "patterns.DataModel$WrittenCouponAdapterV2" = detach-adapter
    }
  }
}

persistenceQueries {
  akka.persistence.journal.plugin = "cassandra-journal"
  akka.persistence.snapshot-store.plugin = "cassandra-snapshot-store"

  cassandra-journal {
    event-adapters {
      tagging-adapter = "patterns.PersistenceQueries$MusicStoreEventAdapter"
    }

    event-adapter-bindings {
      "patterns.PersistenceQueries$PlaylistPurchased" = tagging-adapter
    }
  }
}
